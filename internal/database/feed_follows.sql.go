// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH insert_ff AS (
    INSERT INTO feed_follows(id, created_at, updated_at, user_id, feed_id)
    VALUES (
        $1,
        $3,
        $2,
        (SELECT id FROM users where users.name = $4), 
        (SELECT id FROM feeds WHERE feeds.url = $5)
    )
    RETURNING id, created_at, updated_at, user_id, feed_id
)
SELECT ff.id, ff.created_at, ff.updated_at, ff.user_id, ff.feed_id, users.name, feeds.name
FROM insert_ff ff
    INNER JOIN users ON users.id = ff.user_id
    INNER JOIN feeds ON feeds.id = ff.feed_id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	UpdatedAt time.Time
	CreatedAt time.Time
	Username  string
	FeedUrl   string
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.NullUUID
	FeedID    uuid.NullUUID
	Name      string
	Name_2    string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.UpdatedAt,
		arg.CreatedAt,
		arg.Username,
		arg.FeedUrl,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.Name,
		&i.Name_2,
	)
	return i, err
}

const getFollowing = `-- name: GetFollowing :many
SELECT feed.id, feed.name, feed.url
FROM feeds feed
    INNER JOIN feed_follows ff ON ff.feed_id = feed.id
    INNER JOIN users ON users.id = ff.user_id
WHERE users.name = $1
`

type GetFollowingRow struct {
	ID   uuid.UUID
	Name string
	Url  string
}

func (q *Queries) GetFollowing(ctx context.Context, username string) ([]GetFollowingRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowing, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowingRow
	for rows.Next() {
		var i GetFollowingRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollow = `-- name: Unfollow :exec
DELETE 
FROM feed_follows
WHERE user_id = (SELECT id FROM users WHERE users.name = $1)
    AND feed_id = (SELECT id FROM feeds WHERE feeds.url = $2)
`

type UnfollowParams struct {
	Username string
	FeedUrl  string
}

func (q *Queries) Unfollow(ctx context.Context, arg UnfollowParams) error {
	_, err := q.db.ExecContext(ctx, unfollow, arg.Username, arg.FeedUrl)
	return err
}
